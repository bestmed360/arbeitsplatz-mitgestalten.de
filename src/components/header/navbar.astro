---
import ButtonLink from "@components/button/button-link.astro";
import ToggleMenu from "@components/common/toggle-menu.astro";
import Logo from "@components/logo.astro";
import { config, menu } from "@config/index";
import { cn } from "@utils/classes";

interface Props {
  closeOnClick?: boolean;
}
const { closeOnClick = false } = Astro.props;
const pathname = new URL(Astro.request.url).pathname;
---

<script define:vars={{ closeOnClick }}>
  ["DOMContentLoaded", "astro:after-swap"].forEach((event) => {
    document.addEventListener(event, addListeners);
  });

  // Function to clone and replace elements
  function cloneAndReplace(element) {
    const clone = element.cloneNode(true);
    element.parentNode.replaceChild(clone, element);
  }

  function addListeners() {
    // Clean up existing listeners
    const oldMenuButton = document.getElementById("astronav-menu");
    if (oldMenuButton) {
      cloneAndReplace(oldMenuButton);
    }

    const oldDropdownMenus = document.querySelectorAll(".astronav-dropdown");
    oldDropdownMenus.forEach((menu) => {
      cloneAndReplace(menu);
    });

    // Mobile nav toggle
    const menuButton = document.getElementById("astronav-menu");
    menuButton && menuButton.addEventListener("click", toggleMobileNav);

    // Dropdown menus
    const dropdownMenus = document.querySelectorAll(".astronav-dropdown");
    dropdownMenus.forEach((menu) => {
      const button = menu.querySelector("button");
      button &&
        button.addEventListener("click", (event) =>
          toggleDropdownMenu(event, menu, dropdownMenus)
        );

      // Handle Submenu Dropdowns
      const dropDownSubmenus = menu.querySelectorAll(
        ".astronav-dropdown-submenu"
      );

      dropDownSubmenus.forEach((submenu) => {
        const submenuButton = submenu.querySelector("button");
        submenuButton &&
          submenuButton.addEventListener("click", (event) => {
            event.stopImmediatePropagation();
            toggleSubmenuDropdown(event, submenu);
          });
      });
    });

    // Clicking away from dropdown will remove the dropdown class
    document.addEventListener("click", closeAllDropdowns);

    if (closeOnClick) {
      handleCloseOnClick();
    }
  }

  function toggleMobileNav() {
    [...document.querySelectorAll(".astronav-toggle")].forEach((el) => {
      el.classList.toggle("hidden");
    });
  }

  function toggleDropdownMenu(event, menu, dropdownMenus) {
    toggleMenu(menu);

    // Close one dropdown when selecting another
    Array.from(dropdownMenus)
      .filter((el) => el !== menu && !menu.contains(el))
      .forEach(closeMenu);

    event.stopPropagation();
  }

  function toggleSubmenuDropdown(event, submenu) {
    event.stopPropagation();
    toggleMenu(submenu);

    // Close sibling submenus at the same nesting level
    const siblingSubmenus = submenu
      .closest(".astronav-dropdown")
      .querySelectorAll(".astronav-dropdown-submenu");
    Array.from(siblingSubmenus)
      .filter((el) => el !== submenu && !submenu.contains(el))
      .forEach(closeMenu);
  }

  function closeAllDropdowns(event) {
    const dropdownMenus = document.querySelectorAll(".dropdown-toggle");
    const dropdownParent = document.querySelectorAll(
      ".astronav-dropdown, .astronav-dropdown-submenu"
    );
    const isButtonInsideDropdown = [
      ...document.querySelectorAll(
        ".astronav-dropdown button, .astronav-dropdown-submenu button, #astronav-menu"
      ),
    ].some((button) => button.contains(event.target));
    if (!isButtonInsideDropdown) {
      dropdownMenus.forEach((d) => {
        // console.log("I ran", d);
        // if (!d.contains(event.target)) {
        d.classList.remove("open");
        d.removeAttribute("open");
        d.classList.add("hidden");
        // }
      });
      dropdownParent.forEach((d) => {
        d.classList.remove("open");
        d.removeAttribute("open");
        d.setAttribute("aria-expanded", "false");
      });
    }
  }

  function toggleMenu(menu) {
    menu.classList.toggle("open");
    const expanded = menu.getAttribute("aria-expanded") === "true";
    menu.setAttribute("aria-expanded", expanded ? "false" : "true");
    menu.hasAttribute("open")
      ? menu.removeAttribute("open")
      : menu.setAttribute("open", "");

    const dropdownToggle = menu.querySelector(".dropdown-toggle");
    const dropdownExpanded = dropdownToggle.getAttribute("aria-expanded");
    dropdownToggle.classList.toggle("hidden");
    dropdownToggle.setAttribute(
      "aria-expanded",
      dropdownExpanded === "true" ? "false" : "true"
    );
  }

  function closeMenu(menu) {
    // console.log("closing", menu);
    menu.classList.remove("open");
    menu.removeAttribute("open");
    menu.setAttribute("aria-expanded", "false");
    const dropdownToggles = menu.querySelectorAll(".dropdown-toggle");
    dropdownToggles.forEach((toggle) => {
      toggle.classList.add("hidden");
      toggle.setAttribute("aria-expanded", "false");
    });
  }

  function handleCloseOnClick() {
    const navMenuItems = document.querySelector(".astronav-items");
    const navToggle = document.getElementById("astronav-menu");
    const navLink = navMenuItems && navMenuItems.querySelectorAll("a");

    const MenuIcons = navToggle.querySelectorAll(".astronav-toggle");

    navLink &&
      navLink.forEach((item) => {
        item.addEventListener("click", () => {
          navMenuItems?.classList.add("hidden");
          MenuIcons.forEach((el) => {
            el.classList.toggle("hidden");
          });
        });
      });
  }
</script>

<div
  class={cn(
    // wrapper
    "w-full mx-auto relative",
    // common
    "py-6",
    // md+ (desktop)
    "md:flex md:justify-between md:items-center"
  )}
>
  <div class="flex justify-between">
    <a href="/" class="flex items-center">
      <span class="sr-only" itemprop="name">
        {config.site.title}
      </span>
      <Logo />
    </a>
    <div class="flex md:hidden">
      <ToggleMenu />
    </div>
  </div>

  <nav
    class={cn(
      "astronav-items astronav-toggle",
      "rounded-2xl px-6",
      "hidden items-center overflow-y-auto overflow-x-hidden",
      "md:px-0 shadow-lg md:shadow-none bg-white md:mx-0 md:bg-transparent",
      "mt-2 md:mt-0",
      "transition-all",
      // md+ (desktop)
      "md:flex md:overflow-y-visible md:overflow-x-visible"
    )}
    itemscope
    itemtype="https://schema.org/SiteNavigationElement"
    role="menu"
    aria-label="Main navigation"
  >
    <ul
      class={cn(
        "flex flex-col w-full pt-4",
        "md:pt-0 md:flex-row md:self-center md:gap-x-4"
      )}
    >
      {
        menu.map((m) => (
          <li class="px-4 py-3">
            <a
              href={m.path}
              class={cn(
                "text-lg font-semibold leading-6 text-foreground underlined",
                pathname === m.path && "is--active"
              )}
              role="menuitem"
            >
              {m.title}
            </a>
          </li>
        ))
      }
    </ul>
    <div class="md:hidden flex items-center mt-3 gap-4 p-4">
      <ButtonLink href="/kontakt">Kontakt</ButtonLink>
    </div>
  </nav>
  <div class={cn("hidden md:flex items-center")}>
    <ButtonLink href="/kontakt">Kontakt</ButtonLink>
  </div>
</div>
